var ready=function(){var t,e,a,s,n,o=function(t,e){var a=Date.now();return function(){a+e-Date.now()<0&&(t(),a=Date.now())}},r='<article class="post-card"><a class="post-image-link" href="/posts/{{id}}"><img class="post-image" src="{{background_image}}" alt="post image"></a><section class="post-information"><i class="fa fa-tags"></i><a class="post-category-link" href="/posts/categories/{{category_id}}"><span class="post-category-name">{{category_id}}</span></a>&nbsp;&nbsp;<i class="fa fa-calendar"></i><span class="post-registered">{{created_at}}</span><a class="post-link-title" href="/posts/{{id}}"><h1 class="post-title">{{title}}</h1></a><p class="post-content">{{text}}</p><a class="" href="/posts/{{id}}">Go to Link →</a></section></article>',c=function(){var o=jj(".pagination")[0],c=jj(".pagination .next a")[0];if(e=supportPageOffset?window.pageXOffset:isCSS1Compat?document.documentElement.scrollLeft:document.body.scrollLeft,a=supportPageOffset?window.pageYOffset:isCSS1Compat?document.documentElement.scrollTop:document.body.scrollTop,s=window.innerWidth||document.documentElement.clientWidth||document.body.clientWidth,n=window.innerHeight||document.documentElement.clientHeight||document.body.clientHeight,c&&a>document.body.scrollHeight-2*n){var l,d,p,m,g,u,f,h;if(c.parentNode.setAttribute("class",""),l=c.getAttribute("href"),u={},f={},h={},l){var y=document.createElement("div"),C='<article class="post-card"><div class="post-image empty"></div><section class="post-information"><div class="placeholder"><i class="fa fa-tags"></i><span class="post-category-name">{{category_id}}</span>&nbsp;&nbsp;<i class="fa fa-calendar"></i><span class="post-registered">{{created_at}}</span></div><h1 class="post-title placeholder">{{title}}</h1><p class="post-content placeholder">{{text}}</p><span class="placeholder">Go to Link →</span></section></article>';y.setAttribute("id","post-placeholder"),y.insertAdjacentHTML("beforeend",C),jj("#body-container").appendChild(y),d=new XMLHttpRequest,d.open("GET",l),d.onreadystatechange=function(){var e,a,s=jj("#post-placeholder");if(e=4,a=200,4==d.readyState&&200==d.status){p=JSON.parse(d.responseText),m=p.pages,g=p.page,h=p.posts,u=p.categories;for(var n=0;n<u.length;n++){var c=u[n].id;f[c]=u[n].name}if(s&&s.remove(),h){var l,y,C;for(l=[],postCounter=0;postCounter<h.length;postCounter++){for(var b=r,N=h[postCounter],v="";b.match(/(?:\{{2})(\w{1,})+(?:\}{2})/);)if(v=b.match(/(?:\{{2})(\w{1,})+(?:\}{2})/)[1],"created_at"===v){var w=N[v],E="",A=["JAN","FAB","MAR","APR","MAY","JUN","JUL","AUG","SEP","OCT","NOV","DEC"];E=""+A[(w.match(/(?:\d{4}-)(\d{2})(?:-\d{2})+/)[1]>>0)-1]+" "+w.match(/(?:\d{4}-\d{2}-)(\d{2})/)[1]+". "+w.match(/(\d{4})(?:-\d{2}-\d{2})/)[1],b=b.replace(/(?:\{{2})(\w{1,})+(?:\}{2})/,E)}else b=N[v].length>200?b.replace(/(?:\{{2})(\w{1,})+(?:\}{2})/,N[v].substring(0,200)+"..."):b.replace(/(?:\{{2})(\w{1,})+(?:\}{2})/,N[v]);for(;b.match(/(?:<span[^>]*>)(\d{1,})+(?:\<\/span\>)/);)v=b.match(/(?:<span[^>]*>)(\d{1,})+(?:\<\/span\>)/)[1],b=b.replace(/(?:<span[^>]*>)(\d{1,})+(?:\<\/span\>)/,'<span class="post-category-name"> '+f[v]+" </span>");l.push(b)}for(t.insertAdjacentHTML("beforeend",l.join("")),t.removeChild(o),y=document.createElement("ul"),y.setAttribute("class","list-layout pagination none"),C=[],i=g;i<=m;i++){var x=document.createElement("li"),B=document.createElement("a");i===g?x.setAttribute("class","active"):i===g+1&&x.setAttribute("class","next"),B.setAttribute("href","/?page="+i),x.appendChild(B),y.appendChild(x)}t.insertAdjacentHTML("beforeend",y.outerHTML)}}},d.send()}}};t=jj("#body-container"),e=supportPageOffset?window.pageXOffset:isCSS1Compat?document.documentElement.scrollLeft:document.body.scrollLeft,a=supportPageOffset?window.pageYOffset:isCSS1Compat?document.documentElement.scrollTop:document.body.scrollTop,s=window.innerWidth||document.documentElement.clientWidth||document.body.clientWidth,n=window.innerHeight||document.documentElement.clientHeight||document.body.clientHeight,addEvent(document.body,"click",function(t){t.target.className&&(t.target.className.match(/^post\-link\-image$/)?ga("send","event","메인","Button Press","포스트 클릭 - ["+t.target.parentNode.getElementsByClassName("post-category-name")[0].textContent.trim()+"] "+t.target.parentNode.getElementsByClassName("post-title")[0].textContent.trim()):t.target.className.match(/^post\-thumbnail$/)?ga("send","event","메인","Button Press","포스트 클릭 - ["+t.target.parentNode.parentNode.getElementsByClassName("post-category-name")[0].textContent.trim()+"] "+t.target.parentNode.parentNode.getElementsByClassName("post-title")[0].textContent.trim()):t.target.className.match(/^post\-link\-title$/)?ga("send","event","메인","Button Press","포스트 클릭 - ["+t.target.parentNode.getElementsByClassName("post-category-name")[0].textContent.trim()+"] "+t.target.getElementsByClassName("post-title")[0].textContent.trim()):t.target.className.match(/^post\-title$|^post\-title\s/)?ga("send","event","메인","Button Press","포스트 클릭 - ["+t.target.parentNode.parentNode.getElementsByClassName("post-category-name")[0].textContent.trim()+"] "+t.target.textContent.trim()):t.target.className.match(/^post\-category\-link/)?ga("send","event","메인","Button Press","포스트 카테고리 클릭 - "+t.target.getElementsByClassName("post-category-name")[0].textContent.trim()):t.target.className.match(/^post\-category\-name/)&&ga("send","event","메인","Button Press","포스트 카테고리 클릭 - "+t.target.textContent.trim()))}),window.onscroll=o(c,100)};
//# sourceMappingURL=data:application/json;charset=utf8;base64,
